generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?        @default("https://avatars.githubusercontent.com/u/10367109?v=4")
  accounts      Account[]
  sessions      Session[]
  grantId       String?
  grantEmail    String?
  username      String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Availability  Availability[]
  EventType     EventType[]
  Organization  Organization[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Availability {
  id String @id @default(uuid())

  day      Day
  fromTime String // e.g., '08:00'
  tillTime String // e.g., '18:00'
  isActive Boolean @default(true) // Toggle availability for the day

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model EventType {
  id                String  @id @default(uuid())
  title             String
  duration          Int
  url               String
  description       String
  active            Boolean @default(true)
  videoCallSoftware String  @default("Google Meet")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  displayName String?  // Brand or display name
  tagline     String?
  description String?
  logo        String?
  coverImage  String?
  website     String?
  location    String?
  teamSize    String?  // e.g., "1-10", "11-50"
  phone       String?
  country     String?
  currency    String?  @default("USD")
  socialLinks Json?    @default("{}")
  isPublished Boolean  @default(false)
  slug        String?  @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  projects Project[]
  services Service[]
  clients  Client[]
  reviews  Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([slug])
}

model Project {
  id             String   @id @default(uuid())
  title          String
  description    String?
  coverImage     String?
  images         Json?    @default("[]")
  tags           Json?    @default("[]")
  date           String?
  isPinned       Boolean  @default(false)
  isFeatured     Boolean  @default(false)
  projectUrl     String?
  order          Int      @default(0)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model Service {
  id           String   @id @default(uuid())
  title        String
  description  String?
  icon         String?
  logo         String?
  banner       String?
  pricePerHour Decimal? @db.Decimal(10, 2)
  sampleWork   Json?    @default("[]") // Array of sample work objects
  order        Int      @default(0)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model Client {
  id    String @id @default(uuid())
  name  String
  logo  String?
  order Int    @default(0)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  createdAt DateTime @default(now())

  @@index([organizationId])
}

model Review {
  id            String  @id @default(uuid())
  authorName    String
  authorCompany String?
  authorLogo    String?
  rating        Int
  content       String
  date          String?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  createdAt DateTime @default(now())

  @@index([organizationId])
}
